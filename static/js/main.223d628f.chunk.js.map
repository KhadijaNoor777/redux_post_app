{"version":3,"sources":["actions/types.js","components/Posts.js","actions/postActions.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["FETCH_POSTS","NEW_POST","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","title","body","id","Component","connect","state","items","item","dispatch","console","log","fetch","then","res","json","type","payload","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","addPost","postData","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.223d628f.chunk.js","sourcesContent":["//it contains consts for our action types. Should import those in our reducers.\r\n\r\nexport const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';     //it connects our components to redux\r\nimport { fetchPosts } from '../actions/postActions'\r\n\r\nclass Posts extends Component {\r\n\r\n//******************   All this state and fetching will now be done using reducer   *********************//\r\n\r\n    // constructor(props){\r\n    //     super(props)\r\n    //     this.state = {\r\n    //         posts: []\r\n    //     }\r\n    // }\r\n\r\n    componentWillMount(){\r\n        this.props.fetchPosts();\r\n        // fetch(`https://jsonplaceholder.typicode.com/posts`)\r\n        //     .then(res => res.json())\r\n        //     .then(data => this.setState({posts: data}))\r\n        //console.log(this.state.posts)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.newPost){\r\n            this.props.posts.unshift(nextProps.newPost)\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        const postItems = this.props.posts.map(post => (\r\n            <div key={post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ))\r\n        return (\r\n            <div>\r\n              <h1>Posts</h1> \r\n              {postItems} \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    //from root reducer we are getting posts. And in postReducer we have saved data in items\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\r\n","import { FETCH_POSTS, NEW_POST } from './types'\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    console.log('fetching')\r\n    fetch(`https://jsonplaceholder.typicode.com/posts`)\r\n        .then(res => res.json())\r\n        .then(posts => dispatch({\r\n            type: FETCH_POSTS,            //action\r\n            payload: posts               //data\r\n        }))\r\n}\r\n\r\nexport const addPost = (postData) => dispatch => {\r\n    fetch(`https://jsonplaceholder.typicode.com/posts`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body: JSON.stringify(postData)\r\n        })\r\n        .then(res => res.json())\r\n        .then(post => dispatch({\r\n            type: NEW_POST,            //action\r\n            payload: post               //data\r\n        }))\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';     //it connects our components to redux\r\nimport { addPost } from '../actions/postActions'\r\n\r\nclass PostForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name] : e.target.value})\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        }\r\n\r\n        //*********  Calling action for adding post  ***********//\r\n        this.props.addPost(post)\r\n\r\n        // fetch(`https://jsonplaceholder.typicode.com/posts`, {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'content-type' : 'application/json'\r\n        //     },\r\n        //     body: JSON.stringify(post)\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then(data => console.log(data))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Add Post</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <label><b>Title</b></label><br/>\r\n                        <input type='text' name='title' onChange={this.onChange} value={this.state.title} />\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <label><b>Body</b></label><br/>\r\n                        <textarea name='body' onChange={this.onChange} value={this.state.body} />\r\n                    </div>\r\n                    <br/>\r\n                    <button type='submit'>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    addPost : PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, { addPost })(PostForm);\r\n","//here it will fetch and evaluate any actions on our post\r\n\r\nimport { FETCH_POSTS, NEW_POST } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],     //all posts\r\n    item: {}      //single post\r\n}\r\n\r\n//reducer function takes 2 things, initial or previous state and action\r\n//we are getting type and payload from postActions\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","//root reducer contains all of our reducers\r\n\r\nimport { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer           //calling postReducer as posts\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';          //THUNK?????\r\nimport rootReducer from './reducers'      //getting it from index.js\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\n//const store = createStore(reducerFunction, preloadedState(initial state), enhancer)\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)\r\n    \r\n\r\nexport default store;","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';   //glue between react and redux\n\nimport Posts from './components/Posts'\nimport PostForm from './components/PostForm'\nimport store from './store'\n\n//const store = createStore(reducerFunction, preloadedState(initial state), enhancer)\n//const store = createStore(() => [], {}, applyMiddleware());       //in store.js\n\nfunction App() {\n\n  return (\n    //store holds the state\n    <Provider store={store}> \n      <div className=\"App\">\n        <PostForm /> <hr/>\n        <Posts />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}